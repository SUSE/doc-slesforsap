<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet href="urn:x-suse:xslt:profiling:docbook51-profile.xsl"
    type="text/xml"
    title="Profiling step"
?>
<!DOCTYPE chapter
[
   <!ENTITY % entities SYSTEM "entity-decl.ent">
   %entities;
]>


<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.1" xml:id="s4s-components"><title>&sles4sap; Components</title><info/>
 

 <para>&sles4sapreg; consists of several components such as &sle; &hasi;,
 the Kernel page-cache limit feature, and an Installation Wizard, which
 are briefly explained in the following sections.
 </para>

 <section xml:id="s4s-comp-hasi">
  <title>&sle; &hasi;</title>

  <para>The &sle; &hasi; add-on is part of &sles4sap;.</para>

  <para>
   For more information about &sle; &hasi;, see
  </para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>the &haguide; at <link xlink:href="http://www.suse.com/documentation/sle_ha/"/> and</para>
   </listitem>
   <listitem>
    <para>the <emphasis>Best Practice Guides</emphasis> at <link xlink:href="http://www.suse.com/products/sles-for-sap/resource-library/sap-best-practices.html"/>.
    </para>
   </listitem>
  </itemizedlist>
</section>

<section xml:id="sec-s4s-component-hana-replicate">
  <title>Resource Agents for SAP HANA System Replication</title>

  <para>
   &sles4sap; supports SAP HANA System Replication using components of
   &sle; High-Availability Extension
   and two additional resource agents (RA).
  </para>

  <important>
   <title>Package Update</title>
   <para>
    The features described below are supported starting with version 0.151 of
    the package <systemitem>SAPHanaSR</systemitem>. Make sure to update to this
    version or a newer version of the package.
   </para>
  </important>

  <section xml:id="sec-s4s-hana-ra">
   <title><systemitem>SAPHana</systemitem> Resource Agent</title>
   <!--
    Terms:
    + scale-up: adding more resources to an existing system
    + scale-out: adding complementary systems to your existing ones

    Replication is orthogonal to either of these: It is possible with either
    scale-up or scale-out scenarios. (It is just that SLES does not support
    scale-out at the moment.)

    Fixme/12 SP2: Are scale-out scenarios supported? FATE#318793
    - sknorr, 2016-02-04
   -->
   <!--
    Feedback from Fabian Herschel regarding the word "failover":
    "[W]e should be careful about terms like "failover" or "takeover". Because
    in the SAP HANA ecosystem, the terms are all used twice but differently
    than we do. As normally only SAP HANA users will be interested in details
    about the RAs, I suggest to follow the SAP wording to avoid confusion."
    => Use "takeover".
   -->
   <para>
    This resource agent from SUSE supports scale-up scenarios by checking the
    SAP HANA database instances for whether a takeover needs to happen.
    Unlike with the pure SAP solution, takeovers can be automated.
   </para>
   <para>
    It is configured as a master/slave resource: The master assumes
    responsibility for the SAP HANA databases running in primary mode,
    whereas the slave is responsible for instances
    that are operated in synchronous (secondary) status. In case of a takeover,
    the secondary (slave resource instance) can automatically be promoted to
    become the new primary (master resource instance).
   </para>

   <para>
    This resource agent supports system replication for the following in
    scale-up scenarios:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <formalpara>
      <title>Performance-Optimized Scenario</title>
      <para>
       Two systems (A and B) in the same &sle; High-Availability Extension cluster, one primary (A)
       and one secondary (B). The primary system (A) is
       replicated synchronously to the secondary system (B).
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>Cost-Optimized Scenario</title>
      <para>
       The basic setup of A and B is the same as in the
       <emphasis>Performance-Optimized Scenario</emphasis>.
       However, the secondary system (B) is also used for non-productive
       purposes, such as for a development or QA database. The production
       database is only kept on permanent memory, such as a hard disk.
       If a takeover needs to occur, the non-productive system is stopped
       before the takeover is processed. The system resources for the
       productive database are then increased as quickly as possible via an
       SAP hook call-out script.
      </para>
     </formalpara>
    </listitem>
    <listitem>
     <formalpara>
      <title>Chain/Multi-Tier Scenario</title>
      <para>
       Three systems (A, B, and C), of which two are located in the
       same &sle; High-Availability Extension cluster (A and B). The third system (C) is located
       externally. The primary system (A) is replicated synchronously to the
       secondary system (B). The secondary system (B) is
       replicated asynchronously to the external system (C).
      </para>
     </formalpara>
     <para>
      If a takeover from A to B occurs, the connection between B and C remains
      untouched. However, B is not allowed to be the source for two systems
      (A and C), as this would be a <quote>star</quote> topology which
      is not supported with current SAP HANA versions (such as SPS11).
     </para>
     <para>
      Using SAP HANA commands, you can then manually decide what to do:
     </para>
     <itemizedlist mark="bullet" spacing="normal">
      <listitem>
       <para>
        The connection between B and C can be broken, so that B can
        connect to A.
       </para>
      </listitem>
      <listitem>
       <para>
        If replication to the external system site is more important than
        local system replication, the connection between B and C can be kept.
       </para>
      </listitem>
     </itemizedlist>
    </listitem>
   </itemizedlist>
    <para>
     For all of the scenarios, &sles4sap; supports both single-tenant and
     multi-tenant SAP HANA databases. That is, you can use SAP HANA databases that
     serve multiple SAP applications.
    </para>
  </section>
  <section xml:id="sec-s4s-topology-ra">
   <title><systemitem>SAPHanaTopology</systemitem> Resource Agent</title>
   <para>
    To make configuring the cluster as simple as possible, SUSE has
    developed the <systemitem>SAPHanaTopology</systemitem> resource agent.
    This agent runs on all
    nodes of a &sle; High-Availability Extension cluster and gathers information about the status and
    configurations of SAP HANA system replications. It is designed as a
    normal (stateless) clone.
   </para>
  </section>
  <section xml:id="sec-s4s-hana-replicate-more">
   <title>For More Information</title>
   <para>
    For more information, see:
   </para>
   <itemizedlist mark="bullet" spacing="normal">
    <listitem>
     <para>
      The &haguide; at &docaddress;.
     </para>
    </listitem>
    <listitem>
     <para>
      The <emphasis>White Papers</emphasis> and <emphasis>Best Practice
      Guides</emphasis> in the Resource Library at &reslibrary;.
      In particular, see
      <citetitle>Automate your SAP HANA System Replication Failover</citetitle>.
     </para>
    </listitem>
   </itemizedlist>
  </section>
 </section>

 <!-- page cache limit, etc. -->
 <xi:include href="s4s_configuration.xml" parse="xml"/>


 <section xml:id="s4s-comp-wizard">
  <title>The Installation Wizard</title>

  <para>
   The Installation Wizard offers a guided installation path for both
   the &sls; operating system and the SAP applications.
  </para>

  <para>Additionally, it includes an installation framework for 3rd party
   extensions.</para>

  <para>
   The Installation Wizard consists of four parts:
</para>
  <orderedlist spacing="normal">
   <listitem>
    <para>
     Installation of the operating system (&sls;).
</para>
   </listitem>
   <listitem>
    <para>
     SAP Wizard Part 1: Copying all required SAP media to the local
     disk or use a shared storage medium.</para>
   </listitem>
   <listitem>
    <para>
     SAP Wizard Part 2: Collecting all parameters for the actual installation
     by querying the user interactively.</para>
   </listitem>
   <listitem>
    <para>
     SAP Wizard Part 3: Running the SAP Installer.</para>
   </listitem>
  </orderedlist>

  <para>
   It is possible to run most of these parts separately.  This way, very
   flexible installation scenarios are possible.  Here are some examples:</para>

  <itemizedlist mark="bullet" spacing="normal">
   <listitem>
    <para>
Just prepare a machine with the operating system (&sls;) and run the SAP
Wizard later.</para>
   </listitem>
   <listitem>
    <para>
     Just prepare a machine with the operating system (&sls;), copy the
     SAP media, and collect the SAP installation parameters.</para>
   </listitem>
  </itemizedlist>

    <para>
     You can copy such an installation to other machines, maybe adjusting
     just a few SAP installation parameters.  Then finally run the SAP
     Installer.</para>


<!-- FIXME:

III)
Wir haben in der neuen Version die Partitionierung verändert.
Autoyast hat vorher fixe Rules gemacht.

Nun machen wir eine (fast) fixe Partitionierung nur für das OS
und dann eine "Anwendungsabhänginge" (von Produktauswahl )
Partitionierung die template basierend ist.

Hier der Hinweis auf die SAP-Note mit SWAP
-->

  <!--
        4.3.1 what is it
        4.3.2 further use-cases/sceanrios
	4.3.3 crypto-cd
        sollte im SAP BAiO guide beschrieben sein

        4.3.4 supplement cd
        done (along the Workshop slides)
        4.3.5 partitioner templates
        neues feature -> Peter Varkoly

  -->

  <section xml:id="s4s-comp-wizard-suppl">
   <title>Supplement Media</title>
   <para>
    The basic idea of the <quote>Supplement Media</quote> is to enable
    partners or customers to add their own tasks or workflows to the
    Installation Wizard.
   </para>
   <para>
It is done by adding a small XML file, which will be part of an &ay; XML file. This file must be called <filename>product.xml</filename>; then it will be included in the workflow.
   </para>
   <para>
This can be used for various types of additions, such as adding your own
RPMs, running your own scripts, setting up a cluster file system or
creating your own dialogs and scripts.
   </para>

   <section xml:id="s4s-comp-wizard-suppl-productxml">
    <title><filename>product.xml</filename></title>

    <para>
The <filename>product.xml</filename> file looks like a normal &ay;
XML file, but with some restrictions.
    </para>
    <para>
The restrictions relate to the fact that only the parts for the second
stage of the installation can be run, because the first stage was executed before.
    </para>
    <para>
Both XML files (<filename>autoyast.xml</filename> and
<filename>product.xml</filename>) will be merged after the media is read
and a <quote>new</quote> &ay; XML file is generated on the fly for the
additional workflow.
    </para>
    <para>
     The following areas or sections will be merged:
    </para>
<screen>&lt;general&gt;
  &lt;ask-list&gt;         <co xml:id="co-s4s-ay-general"/>
  ...
&lt;software&gt;           <co xml:id="co-s4s-ay-software"/>
  &lt;post-packages&gt;
  ...
&lt;scripts&gt;
  &lt;chroot-scripts&gt;   <co xml:id="co-s4s-ay-chroot"/>
  &lt;post-scripts&gt;     <co xml:id="co-s4s-ay-post"/>
  &lt;init-scripts&gt;     <co xml:id="co-s4s-ay-init"/>
  ...</screen>
<calloutlist>
 <callout arearefs="co-s4s-ay-general">
  <para>
   see <xref linkend="s4s-comp-wizard-suppl-ask"/>
  </para>
 </callout>
 <callout arearefs="co-s4s-ay-software">
  <para>
   see <xref linkend="s4s-comp-wizard-suppl-addpacks"/>
  </para>
 </callout>
 <callout arearefs="co-s4s-ay-chroot">
  <para>
   after the package installation, before the first boot
  </para>
 </callout>
 <callout arearefs="co-s4s-ay-post">
  <para>
during the first boot of the installed system, no
                      services running
  </para>
 </callout>
 <callout arearefs="co-s4s-ay-init">
  <para>
during the first boot of the installed system, all
                      services up and running
  </para>
 </callout>
</calloutlist>
<para>
All other sections will be replaced.
</para>

<para>
 For the details of other customization options, see the SLES <emphasis>&ay;
 Guide</emphasis>, Chapter 4.12. <quote>Custom User Scripts</quote>.
</para>
   </section>

   <section xml:id="s4s-comp-wizard-suppl-ask">
    <title>Own &ay; Ask Dialogs</title>
    <para>
     For a general overview and details of the Ask feature of &ay;, see
     Chapter 4.17.  <quote>Ask the User for Values During
     Installation</quote> of the SLES <emphasis>&ay; Guide</emphasis>
     (the <emphasis>&ay; Guide</emphasis> comes with the product or is
     available from <link xlink:href="http://www.suse.com/documentation/sles11/"/>).
    </para>
    <para>
For the supplement media you can only use dialogs within the
<literal>cont</literal> stage
(<literal>&lt;stage&gt;cont&lt;/stage&gt;</literal>), which means they
are executed after the first reboot.
    </para>
    <para>
Your file with the dialogs will be merged with the base &ay; XML file.
    </para>
    <para>
As a best practice, your dialog should have a dialog number and an
element number, best with steps of 10. This helps to include later
additions and also could be used as targets for jumping over a dialog or
element dependent on decisions. We also use this in our base dialogs and
if you provide the right dialog number and element number, you can place
your dialog between our base dialogs.
    </para>
    <para>
You can store the answer to a question in a file, to use it in one of
your scripts later.  Be aware that you <emphasis>must</emphasis> use the
prefix <literal>/tmp/ay</literal> for this, because the Installation
Wizard will copy such files from the <filename>/tmp</filename> directory
to the directory where your media data also will be copied.  This is
done because the next supplement media could have the same dialogs or
same answer file names and would overwrite the values saved here.
    </para>
    <para>
     Here is an example with several options:
    </para>
<screen>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE profile&gt;
&lt;profile xmlns="http://www.suse.com/1.0/yast2ns"
         xmlns:config="http://www.suse.com/1.0/configns"&gt;
&lt;general&gt;
  &lt;ask-list config:type="list"&gt;
      &lt;ask&gt;
          &lt;stage&gt;cont&lt;/stage&gt;
          &lt;dialog config:type="integer"&gt;20&lt;/dialog&gt;
          &lt;element config:type="integer"&gt;10&lt;/element&gt;
          &lt;question&gt;What is your name?&lt;/question&gt;
          &lt;default&gt;Enter your name here&lt;/default&gt;
          &lt;help&gt;Please enter your full name within the field&lt;/help&gt;
          &lt;file&gt;/tmp/ay_q_my_name&lt;/file&gt;
          &lt;script&gt;
             &lt;filename&gt;my_name.sh&lt;/filename&gt;
             &lt;rerun_on_error config:type="boolean"&gt;true&lt;/rerun_on_error&gt;
             &lt;environment config:type="boolean"&gt;true&lt;/environment&gt;
             &lt;source&gt;&lt;![CDATA[
function check_name() {
           local name=$1
           LC_ALL=POSIX
           [ -z "$name" ] &amp;&amp; echo "You need to provide a name." &amp;&amp; return 1
           return 0
}
check_name "$VAL"
]]&gt;
             &lt;/source&gt;
             &lt;debug config:type="boolean"&gt;false&lt;/debug&gt;
             &lt;feedback config:type="boolean"&gt;true&lt;/feedback&gt;
          &lt;/script&gt;
      &lt;/ask&gt;
  &lt;/ask-list&gt;
&lt;/general&gt;
&lt;/profile&gt;</screen>
   </section>
   <section xml:id="s4s-comp-wizard-suppl-addpacks">
    <title>Install Additional Packages</title>
    <para>
You can also install RPM packages within the
<filename>product.xml</filename> file. To do this, you can use the
<literal>&lt;post-packages&gt;</literal> element for installation in stage 2.
    </para>
    <para>
     For more information, see the SLES &ay; Guide, Chapter
     4.5.6. <quote>Installing Packages during Stage 2</quote>.  An
     example looks as follows:
    </para>
<screen>...
&lt;software&gt;
 &lt;post-packages config:type="list"&gt;
  &lt;package&gt;yast2-cim&lt;/package&gt;
 &lt;/post-packages&gt;
&lt;/software&gt;
...</screen>
   </section>
   <section>
    <title>Example Directory for the Supplement Media</title>
    <screen># ls
/
|--product.xml
</screen>
   </section>
  </section>

  <section xml:id="s4s-comp-clamsap">
   <title>ClamSAP</title>
   <para>
ClamSAP is a new antivirus toolkit integration with the SAP Virus Scan
Interface that improves cross-platform threat detection.</para>

   <para>
ClamSAP is a ‘C’ shared library to link between ClamAV and the virus
scan interface of SAP (NW-VSI). An SAP application can use the ClamAV
engine to scan for malicious uploads in HTTP uploads for example. If you
want to use Virus Scan within SAP applications, you can use Virus Scan
Interface in SAP (<menuchoice><guimenu>Transaction</guimenu><guimenu>VSCAN</guimenu></menuchoice>).
There is an open source adapter for the ClamAV engine at <link xlink:href="http://freshmeat.net/projects/clamsap/"/>. The library allows
integration of ClamAV into SAP and works also on Unix, where most other
antivirus products do not run.</para>

   <para>
ClamAV is an open source (GPL) antivirus engine designed for detecting
Trojans, viruses, malware, and other malicious threats. It is the de
facto standard for mail gateway scanning. It provides a high performance
multi-threaded scanning daemon, command line utilities for on-demand
file scanning, and an intelligent tool for automatic signature updates.
For more information, see <link xlink:href="http://www.clamav.net"/>.</para>
  </section>
 </section>

</chapter>
