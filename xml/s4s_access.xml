<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sect1
[
  <!ENTITY % entities SYSTEM "generic-entities.ent">
    %entities;
]>
<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-access">
 <title>Configuring a firewall</title>
 <info>
  <dm:docmanager xmlns:dm="urn:x-suse:ns:docmanager">
   <dm:bugtracker/>
   <dm:translation>yes</dm:translation>
  </dm:docmanager>
 </info>
 <para>
  This chapter provides information about restricting access to the system
  using a firewall and encryption and gives information about connecting to
  the system remotely.
 </para>

 <sect1 xml:id="sec-configure-firewall">
  <title>Configuring &firewalld;</title>

  <para>
   By default, the installation workflow of &sles4sap; enables
   &firewalld;.
  </para>

  <note>
   <!-- Taken from doc-sle://security_firewall.xml -->
   <title>&firewalld; replaces &susefirewall;</title>
   <para>
    &productname;&nbsp;15 introduces &firewalld; as the new default software
    firewall, replacing &susefirewall;. &susefirewall; has not been removed from
    &productname;&nbsp;15 and is still part of the main repository, but it is
    not installed by default. If you are upgrading from a release older than
    &productname; 15, &susefirewall; will be unchanged and you must manually
    upgrade to &firewalld; (see &secguide;).
   </para>
  </note>
  <para>
   The firewall must be manually configured to allow network access
   for the following components:
  </para>

  <itemizedlist>
   <listitem>
    <para>
     &sap; application
    </para>
   </listitem>
   <listitem>
    <para>
     Database (see the documentation of your database vendor; for &hana;, see
     <xref linkend="sec-configure-firewall-hana"/>)
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Additionally, open the ports <literal>1128</literal> (TCP) and
   <literal>1129</literal> (UDP).
  </para>

  <para>
   &sap; applications require multiple open ports and port ranges in the
   firewall. The exact numbers depend on the selected instance. For more
   information, see the documentation provided to you by &sap;.
  </para>
 </sect1>

 <sect1 xml:id="sec-configure-firewall-hana">
  <title>Configuring &hana-fw;</title>

  <para>
   To simplify setting up a firewall for &hana;, install the package
   <package>HANA-Firewall</package>. &hana-fw; adds rule sets to your
   existing &susefirewall; configuration.
  </para>
  <para>
   &hana-fw; consists of the following parts:
  </para>
  <itemizedlist>
   <listitem>
    <formalpara>
     <title>&yast; module <guimenu>SAP HANA firewall</guimenu></title>
     <para>
      Allows configuring, applying, and reverting firewall rules for &hana;
      from a graphical user interface.
     </para>
    </formalpara>
   </listitem>
   <listitem>
    <formalpara>
     <title>Command-line utility <systemitem>hana-firewall</systemitem></title>
     <para>
      Creates XML files containing firewall rules for &hana;.
     </para>
    </formalpara>
    <para>
     Instead of using &yast;, you can configure firewall rules using the
     configuration file at <filename>/etc/sysconfig/hana-firewall</filename>.
    </para>
   </listitem>
  </itemizedlist>

  <important>
   <title>&hana; MDC databases</title>
   <para>
    For multi-tenant &hana; (MDC) databases, determining automatically the port
    numbers that need to be opened is not yet possible. If you are working with
    a multi-tenant &hana; database system, run a script to
    create a new service definition before using &yast;:
   </para>
<screen>&prompt.root;<command>cd /etc/hana-firewall.d</command>
&prompt.root;<command>hana-firewall define-new-hana-service</command></screen>
   <para>
    The script prompts you to answer a series of questions, including TCP and UDP port ranges that need to be opened.
   </para>
  </important>

  <note>
   <title>Install &hana-fw; packages</title>
   <para>
    Before continuing, make sure that the packages
    <package>HANA-Firewall</package> and
    <package>yast2-hana-firewall</package> are installed.
   </para>
  </note>

  <procedure>
   <title>Using &hana-fw;</title>
   <step>
    <para>
     Make sure the &hana; databases for which you want to configure the
     firewall are correctly installed.
    </para>
   </step>
   <step>
    <para>
     To open the appropriate &yast; module, select
     <menuchoice><guimenu>Applications</guimenu><guimenu>YaST</guimenu>
     </menuchoice>, <menuchoice><guimenu>Security and Users</guimenu>
     <guimenu>Configure system firewall for SAP HANA</guimenu></menuchoice>.
    </para>
   </step>
   <step>
    <para>
     Under <guimenu>Global Options</guimenu>, activate
     <guimenu>Enable and reload firewalld</guimenu>.
    </para>
   </step>
   <step>
    <para>
    Select the desired zone from the <guimenu>Zone</guimenu> drop-down list, and add the required services using the right arrow button.
    </para>
    <para>
     To add services other than the preconfigured ones, use the
     following notation:
    </para>
<screen><replaceable>SERVICE_NAME</replaceable>:<replaceable>CIDR_NOTATION</replaceable></screen>
    <para>
     For more information about the CIDR notation, see
     <link xlink:href="https://en.wikipedia.org/wiki/Classless_Inter-Domain_Routing"/>.
     To find out which services are available on your system, use
     <command>getent services</command>.
    </para>
   </step>
   <step>
    <para>
     When you are done, click <guimenu>OK</guimenu>.
    </para>
    <para>
     The firewall rules from &hana-fw; will now
     be compiled and applied. Then, the service
     <systemitem>hana-firewall</systemitem> will be restarted.
    </para>
   </step>
   <step>
    <para>
     Finally, check whether &hana-fw; was enabled
     correctly:
    </para>
<screen>&prompt.root;<command>hana-firewall status</command>
HANA firewall is active. Everything is OK.
</screen>
   </step>
  </procedure>
  <para>
   For more information, see the man page of <command>hana-firewall</command>.
  </para>
 </sect1>

 <sect1 xml:id="sec-configure-saprouter">
  <title>&saprouter; integration</title>
  <para>
   The &saprouter; software from &sap; allows proxying network traffic
   between different &sap;
   systems or between an &sap; system and outside networks. &s4s; now
   provides integration for &saprouter; into
   <systemitem class="daemon">systemd</systemitem>. This means that &saprouter;
   will be started and stopped properly with the operating system and can be
   controlled using <command>systemctl</command>.
  </para>
  <para>
   Before you can use this functionality, make sure the following has been
   installed, in this order:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     An &sap; application that includes &saprouter;
    </para>
   </listitem>
   <listitem>
    <para>
     The &saprouter; systemd integration, packaged as
     <package>saprouter-systemd</package>
    </para>
   </listitem>
  </itemizedlist>
  <para>
   If you got the order of applications to install wrong initially, reinstall
   <package>saprouter-systemd</package>.
  </para>
  <para>
   To control &saprouter; with <command>systemctl</command>, use:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     Enabling the &saprouter; service:
     <command>systemctl enable saprouter</command>
    </para>
   </listitem>
   <listitem>
    <para>
     Starting the &saprouter; service:
     <command>systemctl start saprouter</command>
    </para>
   </listitem>
   <listitem>
    <para>
     Showing the Status of &saprouter; service:
     <command>systemctl status saprouter</command>
    </para>
   </listitem>
   <listitem>
    <para>
     Stopping the &saprouter; service:
     <command>systemctl stop saprouter</command>
    </para>
   </listitem>
   <listitem>
    <para>
     Disabling the &saprouter; service:
     <command>systemctl disable saprouter</command>
    </para>
   </listitem>
  </itemizedlist>
 </sect1>

 <sect1 xml:id="sec-secure-dns">
  <title>Securing DNS</title>
  <para>
    On Linux systems, most applications rely on the glibc POSIX style APIs to perform host name resolution. Internally, glibc uses a "Name Service Switch" (NSS) framework to delegate these resolution requests to different configured tools. The configuration for NSS is located in the <filename>/etc/nsswitch.conf</filename> file. Several built-in types for host name resolution are available:
  </para>
  <itemizedlist>
  <listitem>
  <para>
    files: This method uses the <filename>/etc/hosts</filename> file that contains static mappings of host names to IP addresses.
  </para>
  </listitem>
  <listitem>
  <para>
    dns: This option utilizes the glibc's built-in DNS resolver, which is configured via the <filename>/etc/resolv.conf</filename> file.
  </para>
  </listitem>
  </itemizedlist>

  <para>
    To address the security vulnerabilities inherent in the traditional DNS protocol, several protocol-level solutions have been developed.
  </para>

  <para>
    The DNS over TLS and DNS over HTTPS methods aim to enhance security by transmitting DNS queries over encrypted TLS connections, either directly (DoT) or embedded within HTTPS (DoH).
  </para>
  <para>
    The DNSSEC involves cryptographically signing DNS queries and verifying these signatures upon receiving responses. For DNSSEC to function correctly, all DNS servers involved in the resolution process must be configured to support it.
  </para>
  <para>
    Several implementations are available on Linux to facilitate secure DNS resolution.
  </para>
  <para>
    The systemd <literal>resolved</literal> component provides secure DNS resolution services. The systemd <literal>resolved nameservice</literal> plug-in supports integration with the glibc Name Service Switch (NSS) framework. <literal>resolved</literal> is part of the <package>systemd-network</package> package available on PackageHub.
  </para>
  <para>
    To configure <literal>resolved</literal>, add <literal>resolve</literal> to the <literal>hosts</literal> line in the <filename>/etc/nsswitch.conf</filename> file as follows:
  </para>
<screen>hosts:          mymachines resolve [!UNAVAIL=return] files myhostname dns</screen>
  <para>
    It is possible to use <literal>resolved</literal> as a local resolver by directing DNS queries to <literal>localhost:dns</literal>.
  </para>
  <para>
    Use the following command to enable and start the <literal>resolved</literal> service:
  </para>
<screen>&prompt.root;systemctl enable systemd-resolved.service
  &prompt.root;systemctl start systemd-resolved.service</screen>
  <para>
    Configuring <literal>resolved</literal> for secure DNS is done via  the <filename>resolved.conf</filename> configuration file in the <filename>/etc/systemd/resolved.conf.d/</filename> directory.
  </para>
  <para>
    For DNSSEC, the configuration is as follows:
  </para>
<screen>
[Resolve]
# Add your local resolvers below:
DNS=192.168.178.1
DNSSEC=on
</screen>
<para>
  Another approach is to secure DNS through the Unbound name server, which can act as a DNS forwarder, capable of translating regular DNS queries into secure DNS protocols. To use Unbound, it is typically set up locally, and then the <filename>/etc/resolv.conf</filename> file is configured to point to the local Unbound instance.
</para>
<para>
  In SUSE's default configuration, Unbound performs DNSSEC verification by default. The <literal>unbound-anchor</literal> service is responsible for obtaining the standard ISC root key.
</para>
  </sect1>
</chapter>
