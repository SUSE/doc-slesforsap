<?xml version="1.0"?>
<!DOCTYPE chapter [
  <!ENTITY % entities SYSTEM "generic-entities.ent">
  %entities;
]>

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="cha-tune">
 <title>Tuning systems with &saptune;</title>
 <info xmlns:d="http://docbook.org/ns/docbook"><revhistory xml:id="rh-cha-tune">
   <revision>
     <date>2024-12-06</date>
     <revdescription>
       <para/>
     </revdescription>
   </revision>
 </revhistory>
</info>
 <para>
  This chapter provides information about tuning &productname; to work
  optimally with &sap; applications.
 </para>
 <para>
   Using &saptune;, you can tune a system for &netweaver;, &hana;/&bo;, and
   &s4h; applications.
 </para>

  <sect1 xml:id="sec-saptune-enable">
   <title>Installing and updating &saptune;</title>
   <para>
   To install &saptune;, run the <command>zypper install saptune</command> command.
   </para>
   <para>
   When installation is completed, enable and start the <literal>saptune</literal> service (see <xref linkend="sec-saptune-disable"/>) and configure the tuning (see <xref linkend="sec-saptune-configure-tuning"/>).
   </para>
   <para>
   To update &saptune;, use the <command>zypper update saptune</command> command.
   </para>
   <important>
   <para>
   When installing and updating &saptune;, pay attention to zypper output to ensure that installation and updates are performed correctly. The output is also saved in <filename>/var/log/zypp/history</filename>.
   </para>
   </important>
  </sect1>

 <sect1 xml:id="sec-saptune-disable">
  <title>Enabling and disabling &saptune;</title>
  <para>
   To tune the system after a reboot, enable and start the <literal>saptune</literal> service after installation. In most cases, starting the <literal>saptune</literal> service fails, because <literal>sapconf</literal> already tunes the system. To solve the problem, run the following command:
   </para>

<screen>&prompt.root;<command>saptune service takeover</command></screen>

<para>
This command stops and disables the <literal>sapconf</literal> and <literal>tuned</literal> services, and then starts and enables the <literal>saptune</literal> service.
</para>

<para>
To disable and stop the <literal>saptune</literal> service, use the command below:
</para>
  <screen>&prompt.root;<command>saptune service disablestop</command></screen>
 </sect1>

<sect1 xml:id="sec-saptune-configure-tuning">
  <title>Configuring the tuning</title>
  <para>
  The easiest way to tune a system is to apply an &sapsol; that matches your installed &sap; software. &sapsol;s are a group of &sapnote;s that perform the actual tuning. To display all available Solutions and their Notes, run the following command:
  </para>

<screen>&prompt.root;<command>saptune solution list</command></screen>

<para>
&saptune; recognizes the following tuning &sapsol;s:
</para>

<itemizedlist>
<listitem>
<para>
BOBJ Solution for running &bo;
</para>
</listitem>
<listitem>
<para>
HANA Solution for running an &hana; database
</para>
</listitem>
<listitem>
<para>
MAXDB Solution for running an &sap; MaxDB database
</para>
</listitem>
<listitem>
<para>
NETWEAVER Solution for running &netweaver; application servers
</para>
</listitem>
<listitem>
<para>
S4HANA-APPSERVER Solution for running &s4ha;s
</para>
</listitem>
<listitem>
<para>
S4HANA-APP+DB Solution for running both &s4ha;s and &hana; on the same host
</para>
</listitem>
<listitem>
<para>
S4HANA-DBSERVER Solution for running the &hana; database of an &s4h; installation
</para>
</listitem>
<listitem>
<para>
SAP-ASE Solution for running an &ase; database
</para>
</listitem>
<listitem>
<para>
NETWEAVER+HANA Solution for running both &sap; application servers and &hana; on the same host
</para>
</listitem>
<listitem>
<para>
 NETWEAVER+MAXDB Solution for running both &sap; application servers and MAXDB on the same host
</para>
</listitem>
</itemizedlist>

<para>
To apply a Solution, run the following command:
</para>

<screen>&prompt.root;<command>saptune solution apply <replaceable>SOLUTION</replaceable></command></screen>

<para>
Keep in mind that only one Solution can be applied at the time.
</para>

<para>
To disable a Solution, use the command below:
</para>

<screen>&prompt.root;<command>saptune solution revert <replaceable>SOLUTION</replaceable></command></screen>

<para>
To switch to a different Solution, use the following command:
</para>

<screen>&prompt.root;<command>saptune solution change <replaceable>SOLUTION</replaceable></command></screen>

<para>
Alternatively, you can tune the computer according to recommendations from specific &sapnote;s. Use the <command>saptune note list</command> to view a list of notes that you can tune for.
</para>

<para>
To apply a Note, run the following command:
</para>

<screen>&prompt.root;<command>saptune note apply <replaceable>NOTE</replaceable></command></screen>

<para>
Reverting a Note can be done as follows:
</para>

<screen>&prompt.root;<command>saptune note revert <replaceable>NOTE</replaceable></command></screen>

<note>
<title>Combining optimizations</title>
<para>
It is possible to combine Solutions and Notes by reverting Notes from an applied Solution or applying additional ones. However, only one solution can be active at a time. The <literal>saptune</literal> service restores the combination of Solution and Notes after a service restart or reboot.
</para>

<para>
In rare cases, Notes can have conflicting options or parameters. Arrange your Notes carefully to avoid conflicts. The last Note always takes priority over conflicting options or parameters of previous notes. In this situation, create your own Solution (see <xref linkend="sec-saptune-create"/>) or customize the applied Solution (see <xref linkend="sec-saptune-customize"/>).
</para>
</note>
  </sect1>

 <sect1 xml:id="sec-saptune-sapnotes">
  <title>Managing &sapnote;s</title>
  <para>
   The following sections provide information on working with &sapnote;s.
  </para>
  <para>
An &sapnote; configuration contains the OS-specific part of the original &sapnote; as complete as possible. A parameter is disabled (it is present in the configuration, but without value) if it does not have a value recommendation, or if &saptune; cannot safely detect the conditions to set the correct value. To set a suitable value, read the corresponding &sapnote; and customize the Note (see <xref linkend="sec-saptune-customize"/>).
  </para>
  <sect2 xml:id="sec-saptune-customize">
   <title>Customizing an &sapnote;</title>
   <para>
    Any &sapnote; can be configured using the following command:
   </para>
<screen>&prompt.root;<command>saptune note customise <replaceable>NOTE</replaceable></command></screen>
   <para>
    The command opens the default editor (defined in the environment variable <literal>EDITOR</literal>) with a copy of the Note configuration. Remove everything, except the parameters you want to change or disable, as well as the header of the section the parameter belongs to.
    </para>
    <para>
    To change or set the parameter value, change or add the value of the parameter. To disable a parameter, remove the value, but leave the parameter and the <literal>=</literal> character. &saptune; lists the parameter, but it does not change it or check it for the compliance status.
For more information, refer to the <literal>saptune-note(5)</literal> manpage.
   </para>
   <para>
   This creates a <filename>/etc/saptune/override/<replaceable>NOTE</replaceable></filename> file. It is possible to create the file elsewhere and place it in <filename>/etc/saptune/override/</filename>.
   </para>
   <para>
   Configuration sections can be conditional. This is called tagging. Refer to the <literal>saptune-note(5)</literal> for further information.
   </para>
   <para>
   When you are done customizing a Note, restart the <literal>saptune</literal> service to apply the changes.
   </para>
  </sect2>

  <sect2 xml:id="sec-saptune-create">
   <title>Creating a new &sapnote;</title>
   <para>
    A new &sapnote; can be created using the following command:
   </para>
<screen>&prompt.root;<command>saptune note create <replaceable>NOTE</replaceable></command></screen>
   <para>
    The command opens the default editor (defined in the environment variable <literal>EDITOR</literal>) with a Note configuration template. All features of &saptune; are available here. For more information, refer to  the  <literal>saptune-note(5)</literal> manpage.
    </para>
    <para>
    This creates a <filename>/etc/saptune/extra/<replaceable>NOTE.conf</replaceable></filename> Note configuration file. It is possible to create the file elsewhere and place it in <filename>/etc/saptune/extra/</filename>.
    </para>
    <para>
    Configuration sections can be conditional. This is called tagging. Refer to the <literal>saptune-note(5)</literal> for further information.
   </para>
  </sect2>

  <sect2 xml:id="sec-saptune-edit">
   <title>Editing a custom &sapnote;</title>
   <para>
   To edit a custom Note, use the command below:
   </para>
<screen>&prompt.root;<command>saptune note edit <replaceable>NOTE</replaceable></command></screen>

<para>
The command opens the default editor (<literal>EDITOR</literal>) with the Note configuration. When you are done editing a Note, restart the <literal>saptune</literal> service to apply the changes. Custom Notes can be customized like shipped Notes.
</para>
   </sect2>

  <sect2 xml:id="sec-saptune-delete">
   <title>Deleting an &sapnote; or a customization</title>
   <para>
    The following command deletes a note, including the corresponding
    override file, if available:
   </para>
<screen>&prompt.root;<command>saptune note delete test</command>
Note to delete is a customer/vendor specific Note.
Do you really want to delete this Note (test2)? [y/n]: y</screen>
   <para>
    The note may not be applied at the time. Keep in mind the following:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      A confirmation is needed to finish the action.
     </para>
    </listitem>
    <listitem>
     <para>
      Internal &sapnote;s shipped by &saptune; cannot be deleted. Instead, the
      override file is removed when available.
     </para>
    </listitem>
    <listitem>
     <para>
      If the Note is already applied, the command is terminated with the
      message that the note first needs to be reverted before it can be deleted.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-saptune-rename">
   <title>Renaming an &sapnote;</title>
   <para>
    This command allows renaming a created Note to a new name. If a
    corresponding override file is available, this file is renamed as well:
   </para>
<screen>&prompt.root;<command>saptune note rename test test2</command>
Note to rename is a customer/vendor specific Note.
Do you really want to rename this Note (test) to the new name 'test2'? [y/n]: y</screen>
   <para>
    The Note may not be applied at the time. Keep in mind the following points:
   </para>
   <itemizedlist>
    <listitem>
     <para>
      A confirmation is needed to finish the action.
     </para>
    </listitem>
    <listitem>
     <para>
      Internal &sapnote;s shipped by &saptune; cannot be renamed.
     </para>
    </listitem>
    <listitem>
     <para>
      If the Note is already applied, the command is terminated with the
      information that the Note first needs to be reverted before it can be deleted.
     </para>
    </listitem>
   </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-saptune-show">
   <title>Showing the configuration of an &sapnote;</title>
   <para>
    The configuration of a Note can be listed using the following command:
   </para>
<screen>&prompt.root;<command>saptune note show <replaceable>NOTE</replaceable></command></screen>
  </sect2>

  <sect2 xml:id="sec-saptune-verify">
   <title>Verifying an &sapnote;</title>
   <para>
   To verify the tuning of a Note, use the following command:
  </para>
<screen>&prompt.root;<command>saptune note verify <replaceable>NOTE</replaceable></command></screen>
<para>
For information about the output of the command and verifying the entire tuning instead of a single Note, refer to <xref linkend="sec-saptune-verify-and-troubleshooting"/>.
</para>
  </sect2>

  <sect2 xml:id="sec-saptune-simulate">
   <title>Performing a dry run of an &sapnote;</title>
   <para>
    To show each parameter of a Note, use the following command:
    </para>

<screen>&prompt.root;<command>saptune note simulate</command></screen>

<para>
The command lists the current system value and the expected values (default and override).
</para>

<note>
<title>Deprecation notice</title>
<para>
The <command>simulate</command> command is deprecated since version 3.1 and is removed in all &saptune; versions in &sles4sap; 16.
</para>
</note>
  </sect2>

  <sect2 xml:id="sec-saptune-revert">
   <title>Reverting an &sapnote;</title>
   <para>To revert an &sapnote;, run the following command:</para>
    <screen>&prompt.root;<command>saptune note revert <replaceable>NOTE</replaceable></command></screen>
   <para>This restores all parameters of the &sapnote; to their values at the time of application.</para>
   <para>To revert everything, use the following command:</para>
   <screen>&prompt.root;<command>saptune note revert all</command></screen>
  </sect2>

  <sect2 xml:id="sec-saptune-list">
   <title>Listing all enabled or applied &sapnote;s</title>
   <para>
    To list all enabled &sapnote;s, run the following command:
   </para>
   <screen>&prompt.root;<command>saptune note enabled</command></screen>
   <para>To list all applied &sapnote;s, run the command below:</para>
   <screen>&prompt.root;<command>saptune note applied</command></screen>
   <para>
   Both commands are primarily meant for use in scripts.
   </para>
  </sect2>
 </sect1>

 <sect1 xml:id="sec-saptune-sapsolution">
  <title>Managing &sapsol;s</title>
  <para>
   This chapter explains how to work with &sapsol;s.
  </para>
  <para>
An &sapsol; is a combination of &sapnote; configurations grouped logically. It generally represents an &sap; product or combination. Applying an &sapsol; effectively applies all &sapnote; configurations listed in it. Instructions for listing and setting a solution are provided in <xref linkend="sec-saptune-configure-tuning"/>.
  </para>

  <sect2 xml:id="sec-saptune-customize-solution">
  <title>Customizing an &sapsol;</title>
  <para>An &sapsol; can be customized using the following command:</para>
  <screen>&prompt.root;<command>saptune solution customise <replaceable>SOLUTION</replaceable></command></screen>
  <para>
    The command opens the default editor (defined in the environment variable <literal>EDITOR</literal>) with a copy of the Solution configuration. Change the Note list for the architecture to your liking. For more information, refer to the <literal>saptune-note(5)</literal> manpage.
    </para>
    <para>
    This creates an override file <filename>/etc/saptune/override/<replaceable>SOLUTION.sol</replaceable></filename>. It is possible to create the file elsewhere and place it in <filename>/etc/saptune/override/</filename>.
    </para>
    <para>
    When you are done customizing an &sapsol;, restart the <literal>saptune</literal> service to apply the changes.
    </para>
 </sect2>

 <sect2 xml:id="sec-saptune-create-solution">
  <title>Creating a new &sapsol;</title>
  <para>To create a new &sapsol;, run the following command:</para>
<screen>&prompt.root;<command>saptune solution create <replaceable>SOLUTION</replaceable></command></screen>
  <para>
  The command opens the default editor (defined in the environment variable <literal>EDITOR</literal>) with a Solution configuration template. Fill in the template.
  </para>
  <para>
  This creates a Solution configuration file <filename>/etc/saptune/extra/<replaceable>SOLUTION.sol</replaceable></filename>. It is possible to create the file elsewhere and place it in <filename>/etc/saptune/extra/</filename>.
  </para>
 </sect2>

 <sect2 xml:id="sec-saptune-edit-solution">
 <title>Editing a custom &sapsol;</title>
 <para>
 To edit a custom &sapsol;, use the following command:
 </para>

<screen>&prompt.root;<command>saptune solution edit <replaceable>NOTE</replaceable></command></screen>

<para>
The command opens the default editor (defined in the environment variable <literal>EDITOR</literal>) with the Solution configuration.
</para>
<para>
When you are done editing an &sapsol;, restart the saptune service to apply the changes.
</para>
<para>
Custom Solutions can be customized like shipped Solutions.
 </para>
 </sect2>

 <sect2 xml:id="sec-saptune-delete-solution">
   <title>Deleting  &sapsol;</title>
   <para>
   The following command deletes a created Solution (in this example, myHANA), including the corresponding override file or the override file of a shipped Solution, if available:
   </para>
<screen>&prompt.root;<command>saptune solution delete myHANA</command>

Solution to delete is a customer/vendor specific Solution.
Do you really want to delete this Solution 'myHANA'? [y/n]: y</screen>
  <para>
   The &sapsol; may not be applied at the time. Keep in mind the following:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     A confirmation is required to finish the action.
    </para>
   </listitem>
   <listitem>
    <para>
      &sapsol;s shipped by &saptune; cannot be deleted. Only the override file is removed, if available.
    </para>
   </listitem>
   <listitem>
    <para>
      If the &sapsol; is already applied, the command is terminated
      with the information that the &sapsol; first needs to be reverted
      before it can be deleted.
    </para>
   </listitem>
  </itemizedlist>
 </sect2>

  <sect2 xml:id="sec-saptune-rename-solution">
   <title>Renaming an &sapsol;</title>
   <para>To rename an &sapsol;, run the following command:</para>
   <screen>&prompt.root;<command>saptune solution rename myHANA myHANA2</command>

Solution to rename is a customer/vendor specific Solution.
Do you really want to rename this Solution 'myHANA' to the new name 'myHANA2'? [y/n]:</screen>
  <para>
   The &sapsol; may not be applied at the time. Keep in mind the following points:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     A confirmation is needed to finish the action.
    </para>
   </listitem>
   <listitem>
    <para>
      &sapsol;s shipped by &saptune; cannot be renamed.
    </para>
   </listitem>
   <listitem>
    <para>
      If the &sapsol; is already applied, the command will be terminated
      with the information that the &sapsol; first needs to be reverted
      before it can be renamed.
    </para>
   </listitem>
  </itemizedlist>
  </sect2>

  <sect2 xml:id="sec-saptune-show-solution">
   <title>Showing the configuration of an &sapsol;</title>
   <para>To list the configuration of an &sapsol;, run the following command:</para>
   <screen>&prompt.root;<command>saptune solution show <replaceable>SOLUTION</replaceable></command></screen>
  </sect2>

  <sect2 xml:id="sec-saptune-switch-solution">
    <title>Switching to another &sap; Solution</title>
    <para>
      Starting with &saptune; version 3.1, it is easier to switch to a different solution using the <command>saptune solution change <replaceable>SOLUTION</replaceable></command> command.
    </para>
    <para>
      Keep in mind that internally the current solution is reverted first, and then the new solution is applied. If you have additional notes configured, the order is not preserved.
    </para>
    <para>
      If the same solution is already applied, no action is taken. Otherwise the current solution gets reverted and the new one applied. The command prompts for confirmation before making the change. This can be disabled by adding the <option>--force</option> option.
    </para>
  </sect2>

  <sect2 xml:id="sec-saptune-verify-solution">
  <title>Verifying an &sapsol;</title>
  <para>
  To verify the tuning of a Solution, use the following command:
  </para>
<screen>&prompt.root;<command>saptune solution verify <replaceable>SOLUTION</replaceable></command></screen>
<para>
For information about the output of the <command>verify</command> command and how to verify the entire tuning instead of a single Solution, refer to <xref linkend="sec-saptune-verify-and-troubleshooting"/>.
</para>
</sect2>

<sect2 xml:id="sec-saptune-simulate-solution">
<title>Performing a dry run of an SAP Solution</title>
<para>
To show all parameters of all Notes belonging to a Solution, use the following command:
</para>
<screen>&prompt.root;<command>saptune solution simulate <replaceable>SOLUTION</replaceable></command></screen>

<para>
The command lists the current system value and the expected values (default and override).
</para>

<note>
<title>Deprecation notice</title>
<para>
The <command>simulate</command> command is deprecated since 3.1, and it is removed in all &saptune; versions in &sles4sap; 16.
</para>
</note>
</sect2>

  <sect2 xml:id="sec-saptune-revert-solution">
    <title>Reverting an &sapsol;</title>
    <para>To revert an &sapsol;, run the following command:</para>
    <screen>&prompt.root;<command>saptune solution revert <replaceable>SOLUTION</replaceable></command></screen>
    <para>
     The &sapsol; must be applied. This reverts all &sapnote;s parts of the &sapsol; that are still applied.
    </para>
  </sect2>

  <sect2 xml:id="sec-saptune-edit-custom-solution">
   <title>Editing a custom &sapsol;</title>
   <para>To edit a custom &sapsol;, run:</para>
   <screen>&prompt.root;<command>saptune solution edit <replaceable>SOLUTION</replaceable></command></screen>
  </sect2>

  <sect2 xml:id="sec-saptune-list-solution">
   <title>Listing enabled/applied &sapsol;</title>
   <para>To list an enabled &sapsol;, run:</para>
   <screen>&prompt.root;<command>saptune solution enabled</command></screen>
   <para>To list an applied &sapsol;, run:</para>
   <screen>&prompt.root;<command>saptune solution applied</command></screen>
   <para>
    If &sapnote;s from an applied &sapsol; have been reverted, the string <literal>(partial)</literal>
    has been added to the solution name.
   </para>
   <para>
   Both commands are primarily meant for use in scripts.
   </para>
  </sect2>
 </sect1>

  <sect1 xml:id="sec-saptune-verify-and-troubleshooting">
   <title>Verification and troubleshooting</title>
   <para>To see the current status of &saptune;, run the following command:</para>
<screen>&prompt.root;<command>saptune status</command></screen>
   <para>The output contains the following:</para>
   <itemizedlist>
    <listitem>
     <para>status of the &saptune;, &sapconf;, and &tuned; service</para>
    </listitem>
    <listitem>
     <para>version of package and running &saptune;</para>
    </listitem>
    <listitem>
     <para>details about configured &sapsol; and &sapnote;s</para>
    </listitem>
    <listitem>
     <para>details about staging</para>
    </listitem>
    <listitem>
      <para>status of systemd system state</para>
    </listitem>
    <listitem>
      <para>virtualization environment (new in &saptune; version 3.1)</para>
    </listitem>
    <listitem>
      <para>tuning compliance (new in &saptune; version 3.1)</para>
    </listitem>
   </itemizedlist>
   <para>
   To analyze your &saptune; installation, run:
   </para>

<screen>&prompt.root;<command>saptune check</command></screen>

<para>
This command performs the following checks:
</para>

<itemizedlist>
<listitem>
<para>
check for mandatory or obsolete configuration files
</para>
</listitem>
<listitem>
<para>
check for RPM leftovers
</para>
</listitem>
<listitem>
<para>
check if the systemd system state is degraded and list failed units
</para>
</listitem>
<listitem>
<para>
check the status of the sapconf, saptune and tuned services
</para>
</listitem>
</itemizedlist>

<note>
<para>
If <command>saptune check</command> warns about a degraded systemd system status, in most cases it has no impact on &saptune;. However, failed services require troubleshooting.
</para>
</note>

<para>
The command does not check the tuning itself. To check the tuning, use the command below:
</para>

<screen>&prompt.root;<command>saptune note verify</command></screen>

<note>
<para>
If <command>saptune note verify</command> is called without specifying a Note, it verifies all currently applied Notes. This allows you to verify your entire current tuning. As an alternative, use the <command>saptune solution verify</command> command that can also verify all currently applied Notes.
</para>
</note>

<para>
The <command>saptune note verify</command> command prints a table with all applied Notes, including the following:
</para>

<itemizedlist>
<listitem>
<para>
SAP Note and version
</para>
</listitem>
<listitem>
<para>
the parameter
</para>
</listitem>
<listitem>
<para>
the expected value of the parameter
</para>
</listitem>
<listitem>
<para>
the value from an Override if one exists
</para>
</listitem>
<listitem>
<para>
the current system value
</para>
</listitem>
<listitem>
<para>
the compliance status of the parameter
</para>
</listitem>
</itemizedlist>

<para>
The last line contains the overall compliance status of the entire tuning.
</para>

<note>
<para>
Some parameters of shipped Notes are disabled, meaning they have empty values in the "Expected" column. In such cases, the SAP Note does not contain a concrete recommendation or &saptune; cannot detect the conditions for a recommendation. Read the SAP Note and set the value manually by customizing the Note (see <xref linkend="sec-saptune-customize"/>).
</para>
</note>

<para>
If parameters are not compliant, read the footnote if it exists. For some tunings, equivalent parameters exist, for example:
</para>

<itemizedlist>
<listitem>
<para>
<literal>grub:intel_idle.max_cstate</literal> covered by <literal>force_latency</literal>
</para>
</listitem>
<listitem>
<para>
<literal>grub:processor.max_cstate</literal> covered by <literal>force_latency</literal>
</para>
</listitem>
<listitem>
<para>
<literal>grub:numa_balancing</literal> covered by <literal>kernel.numa_balancing</literal>
</para>
</listitem>
<listitem>
<para>
<literal>grub:transparent_hugepage</literal> covered by <literal>THP</literal>
</para>
</listitem>
</itemizedlist>

<para>
A restart of the <literal>saptune</literal> service fixes the problems, except for non-compliant packages (parameter starts with <literal>rpm:</literal>) or GRUB entries (parameter starts with <literal>grub:</literal>). &saptune; does not install, uninstall or upgrade packages, and it never changes the boot loader.
</para>

<para>
A typical problem is the sysctl parameters that are handled by &saptune; and sysctl. A footnote in the parameter's compliance column indicates if it is also present in one of the sysctl configuration files. Remove the parameter from the sysctl configuration or disable the parameter in &saptune; (see <xref linkend="sec-saptune-customize"/>) to fix the problem.
</para>

<para>
Always investigate the cause for the changed tuning and fix it. If &saptune; shall not tune certain parameters, you can revert the Note or just disable parameters via an Override (see <xref linkend="sec-saptune-customize"/>).
   </para>
  </sect1>

  <sect1 xml:id="sec-saptune-machine-readable-output">
    <title>Machine-readable output</title>
    <para>
      Starting with version 3.1, &saptune; supports machine-readable output (JSON) for the following commands:
      </para>
      <itemizedlist>
        <listitem>
          <para>
            <command>saptune [daemon|service] status</command>
          </para>
        </listitem>
        <listitem>
          <para>
            <command>saptune note list|verify|enabled|applied</command>
          </para>
        </listitem>
        <listitem>
          <para>
            <command>saptune solution list|verify|enabled|applied</command>
          </para>
        </listitem>
        <listitem>
          <para>
            <command>saptune status</command>
          </para>
        </listitem>
        <listitem>
          <para>
            <command>saptune version</command>
          </para>
        </listitem>
      </itemizedlist>
    <para>
      The machine-readable output makes it possible to integrate &saptune; into scripts and configuration management solutions.
    </para>
    <para>
      To generate JSON output, add <option>--format json</option> as the first option, for example:
    </para>
<screen>&prompt.user;saptune --format json note applied | jq
{
"$schema": "file:///usr/share/saptune/schemas/1.0/saptune_note_applied.schema.json",
"publish time": "2023-08-29 17:05:45.627",
"argv": "saptune --format json note applied",
"pid": 1538,
"command": "note applied",
"exit code": 0,
"result": {
    "Notes applied": [
    "941735",
    "1771258",
    "1980196",
    "2578899",
    "2684254",
    "2382421",
    "2534844",
    "2993054",
    "1656250"
    ]
},
"messages": []
}</screen>

<para>
  If a command does not yet support JSON output, the command fails with the <literal>result</literal> block set to <literal>"implemented": false</literal>:
</para>
<screen>[+]
&prompt.user;saptune --format json staging status | jq
{
"$schema": "file:///usr/share/saptune/schemas/1.0/saptune_staging_status.schema.json",
"publish time": "2023-08-29 17:08:16.708",
"argv": "saptune --format json staging status",
"pid": 1653,
"command": "staging status",
"exit code": 1,
"result": {
    "implemented": false
},
"messages": []
}</screen>
    </sect1>

 <sect1 xml:id="sec-saptune-staging">
   <title>Staging</title>
   <para>
    It is possible that a new &saptune; package can contain both binary changes
    (for example, bug fixes) and new or altered &sapnote;s and &sapsol;s. In certain situations, it is preferable to deploy bug fixes and new features while leaving modifications to the system configuration out.
   </para>
   <para>
    With staging enabled, &sapnote; and &sapsol; changes in a package update are
    <emphasis>not</emphasis> activated immediately. They are placed in a staging
    area, which can be reviewed and released later.
   </para>
   <important>
    <para>With the current implementation, a package update overwrites the
    staging if staging is enabled.</para>
    <remark>toms 2021-10-14: What to do to avoid this?</remark>
   </important>
   <para>Staging is disabled by default, and it can be enabled with the following command:</para>
   <screen>&prompt.root;<command>saptune staging enable</command></screen>
   <para>From that point, &sapnote; and &sapsol; changes shipped by a &saptune;
   package are put in the staging area. To view the staging area, run:</para>
   <screen>&prompt.root;<command>saptune staging list</command></screen>
   <para>You can print a tabular overview of the differences of the &sapnote;
   and &sapsol; in the staging and working area with the following command:</para>
   <screen>&prompt.root;<command>saptune staging diff [NOTE...|SOLUTION...|all]</command></screen>
   <para>
    After reviewing the differences, you can perform an analysis to see if a
    release has potential issues or requires additional steps. To do
    this, run the following command:
   </para>
   <screen>&prompt.root;<command>saptune staging analysis [NOTE...|SOLUTION...|all]</command></screen>
   <para>
    To release an &sapnote; or an &sapsol; from the staging area, use the command as follows:
   </para>
   <screen>&prompt.root;<command>saptune staging [--force|--dry-run] [NOTE..|SOLUTION...|all]</command></screen>
   <para>
    The command presents an analysis (see <command>saptune staging
    analysis</command>) and carries out the release after asking for
    confirmation.
   </para>
  </sect1>

 <sect1 xml:id="sec-saptune-more">
  <title>For more information</title>
  <para>
   See the following man pages:
  </para>
  <itemizedlist>
   <listitem>
    <para>
     <command>man 8 saptune</command>
    </para>
   </listitem>
   <listitem>
    <para>
     <command>man 8 saptune-migrate</command>
    </para>
   </listitem>
   <listitem>
    <para>
     <command>man 8 saptune-note</command>
    </para>
   </listitem>
  </itemizedlist>
  <para>
   Also see the project home page
   <link xlink:href="https://github.com/SUSE/saptune/"/>.
  </para>
 </sect1>
</chapter>
