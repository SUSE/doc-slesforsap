<?xml version="1.0"?>
<!DOCTYPE appendix [
  <!ENTITY % entities SYSTEM "generic-entities.ent">
  %entities;
]>

<appendix xmlns="http://docbook.org/ns/docbook" xmlns:xi="http://www.w3.org/2001/XInclude" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0" xml:id="app-component-supplement">
 <title>&supmedia;</title>
 <info xmlns:d="http://docbook.org/ns/docbook">
  <revhistory xml:id="rh-app-component-supplement">
   <revision>
    <date>2021-01-05</date>
    <revdescription>
     <para/>
    </revdescription>
   </revision>
  </revhistory>
 </info>
 <para>
  &supmedia; allow partners or customers to add their own tasks or workflows to
  the Installation Wizard.
 </para>

 <para>
  This is done by adding an XML file which will be part of an &ay; XML file. To
  be included in the workflow, this file must be called
  <filename>product.xml</filename>.
 </para>

 <para>
  This can be used for various types of additions, such as adding your own
  RPMs, running your own scripts, setting up a cluster file system or
  creating your own dialogs and scripts.
 </para>

 <sect1 xml:id="sec-component-supplement-productxml">
  <title><filename>product.xml</filename></title>
  <para>
   The <filename>product.xml</filename> file looks like a normal &ay;
   XML file, but with some restrictions.
  </para>
  <para>
   The restrictions exist because only the parts of the XML that are related
   to the second stage of the installation are run, as the first stage was
   executed before.
  </para>
  <para>
   The two XML files (<filename>autoyast.xml</filename> and
   <filename>product.xml</filename>) will be merged after the media is read
   and a <quote>new</quote> &ay; XML file is generated on the fly for
   the additional workflow.
  </para>
  <para>
   The following areas or sections will be merged:
  </para>
<screen>&lt;general&gt;
  &lt;ask-list&gt;         <co xml:id="co-ay-general"/>
  ...
&lt;software&gt;           <co xml:id="co-ay-software"/>
  &lt;post-packages&gt;
  ...
&lt;scripts&gt;
  &lt;chroot-scripts&gt;   <co xml:id="co-ay-chroot"/>
  &lt;post-scripts&gt;     <co xml:id="co-ay-post"/>
  &lt;init-scripts&gt;     <co xml:id="co-ay-init"/>
  ...</screen>
  <calloutlist>
   <callout arearefs="co-ay-general">
    <para>
     see <xref linkend="sec-component-supplement-ask"/>
    </para>
   </callout>
   <callout arearefs="co-ay-software">
    <para>
     see <xref linkend="sec-component-supplement-rpm"/>
    </para>
   </callout>
   <callout arearefs="co-ay-chroot">
    <para>
     after the package installation, before the first boot
    </para>
   </callout>
   <callout arearefs="co-ay-post">
    <para>
     during the first boot of the installed system, no services running
    </para>
   </callout>
   <callout arearefs="co-ay-init">
    <para>
     during the first boot of the installed system, all services up and
     running
    </para>
   </callout>
  </calloutlist>
  <para>
   All other sections will be replaced.
  </para>
  <para>
   For more information about customization options, see
   <citetitle>
    &ay; Guide,
    Chapter <quote>Configuration and Installation Options</quote>,
    Section <quote>Custom User Scripts</quote>
   </citetitle> (&docaddress;).
  </para>
 </sect1>

 <sect1 xml:id="sec-component-supplement-ask">
  <title>Own &ay; ask dialogs</title>
  <para>
   For more information about the <quote>Ask</quote> feature of &ay;, see
   <citetitle>
    &ay; Guide,
    Chapter <quote>Configuration and Installation Options</quote>,
    Section <quote>Ask the User for Values During Installation</quote>
   </citetitle> (&docaddress;).
  </para>
  <para>
   For the &supmedia;, you can only use dialogs within the
   <literal>cont</literal> stage
   (<literal>&lt;stage&gt;cont&lt;/stage&gt;</literal>), which means they
   are executed after the first reboot.
  </para>
  <para>
   Your file with the dialogs will be merged with the base &ay; XML
   file.
  </para>
  <para>
   As a best practice, your dialog should have a dialog number and an
   element number, best with steps of 10. This helps to include later
   additions and could be used as targets for jumping over a dialog or
   element dependent on decisions. We also use this in our base dialogs and
   if you provide the right dialog number and element number, you can place
   your dialog between our base dialogs.
  </para>
  <para>
   You can store the answer to a question in a file, to use it in one of
   your scripts later. Be aware that you <emphasis>must</emphasis> use the
   prefix <literal>/tmp/ay</literal> for this, because the Installation
   Wizard will copy such files from the <filename>/tmp</filename> directory
   to the directory where your media data also will be copied. This is done
   because the next &supmedia; could have the same dialogs or same
   answer file names and would overwrite the values saved here.
  </para>
  <para>
   Here is an example with several options:
  </para>
<screen>&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE profile&gt;
&lt;profile xmlns="http://www.suse.com/1.0/yast2ns"
         xmlns:config="http://www.suse.com/1.0/configns"&gt;
&lt;general&gt;
  &lt;ask-list config:type="list"&gt;
      &lt;ask&gt;
          &lt;stage&gt;cont&lt;/stage&gt;
          &lt;dialog config:type="integer"&gt;20&lt;/dialog&gt;
          &lt;element config:type="integer"&gt;10&lt;/element&gt;
          &lt;question&gt;What is your name?&lt;/question&gt;
          &lt;default&gt;Enter your name here&lt;/default&gt;
          &lt;help&gt;Please enter your full name within the field&lt;/help&gt;
          &lt;file&gt;/tmp/ay_q_my_name&lt;/file&gt;
          &lt;script&gt;
             &lt;filename&gt;my_name.sh&lt;/filename&gt;
             &lt;rerun_on_error config:type="boolean"&gt;true&lt;/rerun_on_error&gt;
             &lt;environment config:type="boolean"&gt;true&lt;/environment&gt;
             &lt;source&gt;&lt;![CDATA[
function check_name() {
           local name=$1
           LC_ALL=POSIX
           [ -z "$name" ] &amp;&amp; echo "You need to provide a name." &amp;&amp; return 1
           return 0
}
check_name "$VAL"
]]&gt;
             &lt;/source&gt;
             &lt;debug config:type="boolean"&gt;false&lt;/debug&gt;
             &lt;feedback config:type="boolean"&gt;true&lt;/feedback&gt;
          &lt;/script&gt;
      &lt;/ask&gt;
  &lt;/ask-list&gt;
&lt;/general&gt;
&lt;/profile&gt;</screen>
 </sect1>

 <sect1 xml:id="sec-component-supplement-rpm">
  <title>Installing additional packages</title>
  <para>
   You can also install RPM packages within the
   <filename>product.xml</filename> file. To do this, you can use the
   <literal>&lt;post-packages&gt;</literal> element for installation in
   stage 2.
  </para>
  <para>
   For more information, see
   <citetitle>
    &ay; Guide,
    Chapter <quote>Configuration and Installation Options</quote>,
    Section <quote>Installing Packages in Stage 2</quote>
   </citetitle> (&docaddress;). An example looks as
   follows:
  </para>
<screen>...
&lt;software&gt;
 &lt;post-packages config:type="list"&gt;
  &lt;package&gt;yast2-cim&lt;/package&gt;
 &lt;/post-packages&gt;
&lt;/software&gt;
...</screen>
 </sect1>

 <sect1 xml:id="sec-supplement-directory">
  <title>Example directory for &supmedia;</title>
  <para>
   A minimal example for the &supmedia; directory contains only a file called
   <filename>product.xml</filename>.
  </para>
  <remark>
   Do we really need this section? - sknorr, 2016-01-12
  </remark>
 </sect1>
</appendix>
